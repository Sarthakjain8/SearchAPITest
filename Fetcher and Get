import datetime
import requests
from fastapi import FastAPI, Query

app = FastAPI()

# Define your HubSpot OAuth constants
HUBSPOT_CLIENT_ID = "db360d7a-1b00-4b46-9f17-13425e7020ef"
HUBSPOT_CLIENT_SECRET = "8e3b1176-b75c-480e-8028-faa61b6e0e1f"
HUBSPOT_REDIRECT_URI = "http://127.0.0.1:8000"

# Define the base URL for the HubSpot API
BASE_URL_OBJECTS = "https://api.hubapi.com/crm/v3/objects/{}/search"

# Route to handle the OAuth callback from HubSpot
@app.get("http://127.0.0.1:8000")
async def hubspot_callback(auth_code: str = Query(...)):
    client_credentials = {
        'client_id': HUBSPOT_CLIENT_ID,
        'client_secret': HUBSPOT_CLIENT_SECRET,
        'redirect_uri': HUBSPOT_REDIRECT_URI,
    }

    response = requests.post('https://api.hubapi.com/oauth/v1/token',
                             data={
                                 'client_id': client_credentials['client_id'],
                                 'client_secret': client_credentials['client_secret'],
                                 'code': auth_code,
                                 'redirect_uri': client_credentials['redirect_uri'],
                                 'grant_type': 'authorization_code'
                             })

    if response.status_code // 100 != 2:
        print(f"Non 2XX response from HubSpot OAuth: ", response.text)
        response.raise_for_status()

    responses = response.json()
    access_token = responses.get('access_token')
    now_timestamp = int(datetime.datetime.now().timestamp())

    # Use the access token to perform a global search
    search_results = global_hubspot_search(access_token, "YourDefaultSearchValue")

    return {
        "access_token_info": {
            "access_token": access_token,
            'timestamp': now_timestamp
        },
        "search_results": search_results
    }

def global_hubspot_search(access_token, search_value):
    # Define the CRM object types you want to search
    object_types = [
        "contacts",
        "companies",
        "deals",
        "tickets",
        # Add more object types as needed
    ]

    # Create a dictionary to store the search results
    search_results = {}

    # Iterate through each object type
    for object_type in object_types:
        # Construct the filterGroups based on the provided search value
        filter_groups = [
            {
                "filters": [
                    {
                        "operator": "CONTAINS",
                        "value": search_value,
                    }
                ]
            }
        ]

        # Construct the request payload
        request_payload = {
            "filterGroups": filter_groups
        }

        # Set up headers for the API request
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {access_token}"
        }

        # Send a POST request to search the CRM object type
        response_objects = requests.post(BASE_URL_OBJECTS.format(object_type), json=request_payload, headers=headers)

        if response_objects.status_code // 100 != 2:
            print(f"Error in the HubSpot API request for {object_type}: {response_objects.text}")
            response_objects.raise_for_status()

        object_data = response_objects.json()

        # Check if there are matching records in the response
        if object_data.get("total") > 0:
            # Store the search results
            search_results[object_type] = {
                "total": object_data["total"],
                "locations": []  # List to store specific locations
            }

            # Customize the logic to find specific cells or records containing the search value
            for record in object_data["results"]:
                # Example: Find specific cells or records and add them to the "locations" list
                location_info = {
                    "record_id": record["id"],
                    "details": "Details of the location"  # Customize this
                }
                search_results[object_type]["locations"].append(location_info)

    return search_results

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
